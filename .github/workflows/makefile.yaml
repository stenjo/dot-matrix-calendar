name: Makefile CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  esp8266:
    # cannnot compile and build for ESP8266
    if: false 
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Exporting xtensa gcc path
      run: echo "ESP_ESPRESSIF_ROOT=/usr/lib/espressif" >> $GITHUB_ENV

    - name: Install tools
      run: |
        sudo mkdir /usr/lib/espressif
        wget https://github.com/jepler/esp-open-sdk/releases/download/2018-06-10/xtensa-lx106-elf-standalone.tar.gz
        sudo tar zxvf xtensa-lx106-elf-standalone.tar.gz -C /usr/lib/espressif
        sudo rm /usr/lib/espressif/xtensa-lx106-elf/bin/esptool.py
        pip install esptool freezefs
        
    - name: Update repos
      run: |
        git submodule update --init lib/micropython
        make -C lib/micropython/mpy-cross
        
    - name: Make submodules    
      working-directory: lib/micropython
      run: |
        git submodule update --init lib/stm32lib lib/berkeley-db-1.xx
        make -C ports/esp8266 submodules
        
    - name: Make frozen extractable files    
      run: |
        git submodule update --init micropython-wifi-setup
        python -m freezefs modules/micropython-wifi-setup frozen-wifi-setup.py
        freezefs.py src src.py --target=. --on_import=extract --compress
        make -C ports/esp8266 submodules
        
    - name: Compile firmware
      working-directory: boards/ESP8266_GENERIC
      run: |
        echo "${{ env.ESP_ESPRESSIF_ROOT}}/xtensa-lx106-elf/bin" >> $GITHUB_PATH
        /usr/lib/espressif/xtensa-lx106-elf/bin/xtensa-lx106-elf-gcc -v
        make CROSS_COMPILE=/usr/lib/espressif/xtensa-lx106-elf/bin/xtensa-lx106-elf-

    - name: Check output
      working-directory: boards/ESP8266_GENERIC
      run: ls -al build/firmware.bin

    - name: Save binary
      uses: actions/upload-artifact@v4
      with:
        name: esp8266-binary
        path: boards/ESP8266_GENERIC/build/firmware.bin

  esp32:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Exporting xtensa gcc path
      run: echo "ESP_ESPRESSIF_ROOT=/usr/lib/espressif" >> $GITHUB_ENV

    - name: Install tools
      run: |
        git clone -b v5.1.2 --recursive https://github.com/espressif/esp-idf.git
        cd esp-idf
        ./install.sh
        source export.sh
        pip install esptool freezefs
        
    - name: Update repos
      run: |
        git submodule update --init lib/micropython
        git submodule update --init modules/micropython-wifi-setup
        make -C lib/micropython/mpy-cross
        
    - name: Make submodules    
      working-directory: lib/micropython/ports/esp32
      run: |
        source ../../../../esp-idf/export.sh
        make submodules
        make
      
    - name: Make frozen extractable files    
      working-directory: modules
      run: |
        pip install freezefs
        git submodule update --init micropython-wifi-setup
        python -m freezefs micropython-wifi-setup/lib/wifi_setup frozen_wifi_setup.py -ov always
        python -m freezefs micropython-wifi-setup/lib/micro_web_srv_2 frozen_micro_web_srv_2.py -ov always

        
    - name: Compile firmware
      working-directory: boards/CUSTOM_ESP32
      run: |
        source ../../esp-idf/export.sh
        idf.py build
        zip -r esp32.zip build -x build/CMakeFiles/**/*.bin -x build/bootloader/CMakeFiles/**/*.bin  -i *.bin -i *.elf
      
    - name: Merge with src files
      run: |
        pip install vfs_merge
        mkdir build
        vfsmerge --port esp32 --firmware ./boards/CUSTOM_ESP32/build/micropython.bin
      
    - name: Check output
      working-directory: boards/CUSTOM_ESP32
      run: ls -al build/*

    - name: Save binary
      uses: actions/upload-artifact@v4
      with:
        name: esp32-binary
        path: boards/CUSTOM_ESP32/esp32.zip
        
    - name: Check output
      run: ls -al build/
  
    - name: Save binary
      uses: actions/upload-artifact@v4
      with:
        name: esp32-binary-src
        path: build/firmware_lfs.bin

    - name: Compile firmware LOLIN_S2_MINI
      working-directory: boards/LOLIN_S2_MINI
      run: |
        source ../../esp-idf/export.sh
        idf.py build
        zip -r esp32s2.zip build -x build/CMakeFiles/**/*.bin -x build/bootloader/CMakeFiles/**/*.bin  -i *.bin -i *.elf
      
    - name: Check output
      working-directory: boards/LOLIN_S2_MINI
      run: ls -al build/micropython.bin
      
    - name: Save binary
      uses: actions/upload-artifact@v4
      with:
        name: esp32-S2-binary
        path: boards/LOLIN_S2_MINI/esp32s2.zip

    - name: Merge with src files
      run: |
        vfsmerge --port esp32 --firmware ./boards/LOLIN_S2_MINI/build/micropython.bin

    - name: Check output
      run: ls -al build/
    
    - name: Save binary
      uses: actions/upload-artifact@v4
      with:
          name: esp32-S2-binary-src
          path: build/firmware_lfs.bin
  
  