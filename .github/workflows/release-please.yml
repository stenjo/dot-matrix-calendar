on:
  push:
    branches:
      - main
name: release-please
jobs:
  release-please:
    runs-on: ubuntu-latest
    steps:
      - uses: googleapis/release-please-action@v4
        id: release
        with:
          release-type: simple
          token: ${{secrets.PERSONAL_ACCESS_TOKEN}}

      # Additional step that updates version.txt in the src/ subfolder
      - name: Checkout repo
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Install tools
        if: ${{ steps.release.outputs.release_created }}
        run: |
            git clone -b v5.1.2 --recursive https://github.com/espressif/esp-idf.git
            cd esp-idf
            ./install.sh esp32s2,esp32,esp32s3
            source export.sh
            pip install esptool freezefs
            cd ..
            git submodule update --init lib/micropython
            git submodule update --init modules/micropython-wifi-setup
            make -C lib/micropython/mpy-cross
            
      - name: Make submodules    
        if: ${{ steps.release.outputs.release_created }}
        working-directory: lib/micropython/ports/esp32
        run: |
            source ../../../../esp-idf/export.sh
            make submodules
            make
          
      - name: Make frozen extractable files    
        if: ${{ steps.release.outputs.release_created }}
        working-directory: modules
        run: |
          pip install freezefs
          git submodule update --init micropython-wifi-setup
          python -m freezefs micropython-wifi-setup/lib/wifi_setup frozen_wifi_setup.py -ov always
          python -m freezefs micropython-wifi-setup/lib/micro_web_srv_2 frozen_micro_web_srv_2.py -ov always
              
      - name: Compile firmware LOLIN_S2_MINI
        if: ${{ steps.release.outputs.release_created }}
        working-directory: boards/LOLIN_S2_MINI
        run: |
          source ../../esp-idf/export.sh
          idf.py build
          zip -r esp32s2.zip build -x build/CMakeFiles/**/*.bin -x build/bootloader/CMakeFiles/**/*.bin  -i *.bin -i *.elf
          ls -al build
          
      - name: Save binary
        if: ${{ steps.release.outputs.release_created }}
        uses: actions/upload-artifact@v4
        with:
          name: esp32-S2-binary
          path: boards/LOLIN_S2_MINI/esp32s2.zip

      - uses: actions/download-artifact@v4
        if: ${{ steps.release.outputs.release_created }}
        with:
          name: esp32-S2-binary

      
      - name: Update version.txt
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        continue-on-error: true
        run: |
          # Extract the version number from the latest git tag
          VERSION=$(git describe --tags $(git rev-list --tags --max-count=1))
          
          # Update version.txt with the new version in the src/ subfolder
          echo $VERSION > src/version.txt
          
          # Optionally commit and push version.txt to the repo
          git config --global credential.helper '!f() { sleep 1; echo "username=git token=${{ secrets.PERSONAL_ACCESS_TOKEN }}"; }; f'
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git add src/version.txt
          git commit -m "chore: update version.txt to $VERSION"
          git push

      - name: Upload Release Artifact
        if: ${{ steps.release.outputs.release_created }}
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: gh release upload ${{ steps.release.outputs.tag_name }} ./boards/LOLIN_S2_MINI/esp32s2.zip
  
  