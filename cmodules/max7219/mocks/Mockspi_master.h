/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKSPI_MASTER_H
#define _MOCKSPI_MASTER_H

#include "unity.h"
#include "spi_master.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

#ifdef __cplusplus
extern "C" {
#endif

void Mockspi_master_Init(void);
void Mockspi_master_Destroy(void);
void Mockspi_master_Verify(void);




#define spi_bus_add_device_ExpectAndReturn(host_id, dev_config, handle, cmock_retval) spi_bus_add_device_CMockExpectAndReturn(__LINE__, host_id, dev_config, handle, cmock_retval)
void spi_bus_add_device_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, spi_host_device_t host_id, const spi_device_interface_config_t* dev_config, spi_device_handle_t* handle, esp_err_t cmock_to_return);
#define spi_bus_remove_device_ExpectAndReturn(handle, cmock_retval) spi_bus_remove_device_CMockExpectAndReturn(__LINE__, handle, cmock_retval)
void spi_bus_remove_device_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, spi_device_handle_t handle, esp_err_t cmock_to_return);
#define spi_device_queue_trans_ExpectAndReturn(handle, trans_desc, ticks_to_wait, cmock_retval) spi_device_queue_trans_CMockExpectAndReturn(__LINE__, handle, trans_desc, ticks_to_wait, cmock_retval)
void spi_device_queue_trans_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, spi_device_handle_t handle, spi_transaction_t* trans_desc, TickType_t ticks_to_wait, esp_err_t cmock_to_return);
#define spi_device_get_trans_result_ExpectAndReturn(handle, trans_desc, ticks_to_wait, cmock_retval) spi_device_get_trans_result_CMockExpectAndReturn(__LINE__, handle, trans_desc, ticks_to_wait, cmock_retval)
void spi_device_get_trans_result_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, spi_device_handle_t handle, spi_transaction_t** trans_desc, TickType_t ticks_to_wait, esp_err_t cmock_to_return);
#define spi_device_transmit_ExpectAndReturn(handle, trans_desc, cmock_retval) spi_device_transmit_CMockExpectAndReturn(__LINE__, handle, trans_desc, cmock_retval)
void spi_device_transmit_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, spi_device_handle_t handle, spi_transaction_t* trans_desc, esp_err_t cmock_to_return);
#define spi_device_polling_start_ExpectAndReturn(handle, trans_desc, ticks_to_wait, cmock_retval) spi_device_polling_start_CMockExpectAndReturn(__LINE__, handle, trans_desc, ticks_to_wait, cmock_retval)
void spi_device_polling_start_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, spi_device_handle_t handle, spi_transaction_t* trans_desc, TickType_t ticks_to_wait, esp_err_t cmock_to_return);
#define spi_device_polling_end_ExpectAndReturn(handle, ticks_to_wait, cmock_retval) spi_device_polling_end_CMockExpectAndReturn(__LINE__, handle, ticks_to_wait, cmock_retval)
void spi_device_polling_end_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, spi_device_handle_t handle, TickType_t ticks_to_wait, esp_err_t cmock_to_return);
#define spi_device_polling_transmit_ExpectAndReturn(handle, trans_desc, cmock_retval) spi_device_polling_transmit_CMockExpectAndReturn(__LINE__, handle, trans_desc, cmock_retval)
void spi_device_polling_transmit_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, spi_device_handle_t handle, spi_transaction_t* trans_desc, esp_err_t cmock_to_return);
#define spi_device_acquire_bus_ExpectAndReturn(device, wait, cmock_retval) spi_device_acquire_bus_CMockExpectAndReturn(__LINE__, device, wait, cmock_retval)
void spi_device_acquire_bus_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, spi_device_handle_t device, TickType_t wait, esp_err_t cmock_to_return);
#define spi_device_release_bus_Expect(dev) spi_device_release_bus_CMockExpect(__LINE__, dev)
void spi_device_release_bus_CMockExpect(UNITY_LINE_TYPE cmock_line, spi_device_handle_t dev);
#define spi_get_actual_clock_ExpectAndReturn(fapb, hz, duty_cycle, cmock_retval) spi_get_actual_clock_CMockExpectAndReturn(__LINE__, fapb, hz, duty_cycle, cmock_retval)
void spi_get_actual_clock_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int fapb, int hz, int duty_cycle, int cmock_to_return);
#define spi_get_timing_Expect(gpio_is_used, input_delay_ns, eff_clk, dummy_o, cycles_remain_o) spi_get_timing_CMockExpect(__LINE__, gpio_is_used, input_delay_ns, eff_clk, dummy_o, cycles_remain_o)
void spi_get_timing_CMockExpect(UNITY_LINE_TYPE cmock_line, bool gpio_is_used, int input_delay_ns, int eff_clk, int* dummy_o, int* cycles_remain_o);
#define spi_get_freq_limit_ExpectAndReturn(gpio_is_used, input_delay_ns, cmock_retval) spi_get_freq_limit_CMockExpectAndReturn(__LINE__, gpio_is_used, input_delay_ns, cmock_retval)
void spi_get_freq_limit_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, bool gpio_is_used, int input_delay_ns, int cmock_to_return);

#ifdef __cplusplus
}
#endif

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
