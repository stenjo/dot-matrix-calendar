/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKESP_ERR_H
#define _MOCKESP_ERR_H

#include "unity.h"
#include "esp_err.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

#ifdef __cplusplus
extern "C" {
#endif

void Mockesp_err_Init(void);
void Mockesp_err_Destroy(void);
void Mockesp_err_Verify(void);




#define esp_err_to_name_ExpectAndReturn(code, cmock_retval) esp_err_to_name_CMockExpectAndReturn(__LINE__, code, cmock_retval)
void esp_err_to_name_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t code, const char* cmock_to_return);
#define esp_err_to_name_r_ExpectAndReturn(code, buf, buflen, cmock_retval) esp_err_to_name_r_CMockExpectAndReturn(__LINE__, code, buf, buflen, cmock_retval)
void esp_err_to_name_r_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t code, char* buf, size_t buflen, const char* cmock_to_return);
#define _esp_error_check_failed_Expect(rc, file, line, function, expression) _esp_error_check_failed_CMockExpect(__LINE__, rc, file, line, function, expression)
void _esp_error_check_failed_CMockExpect(UNITY_LINE_TYPE cmock_line, esp_err_t rc, const char* file, int line, const char* function, const char* expression);
#define _esp_error_check_failed_without_abort_Expect(rc, file, line, function, expression) _esp_error_check_failed_without_abort_CMockExpect(__LINE__, rc, file, line, function, expression)
void _esp_error_check_failed_without_abort_CMockExpect(UNITY_LINE_TYPE cmock_line, esp_err_t rc, const char* file, int line, const char* function, const char* expression);

#ifdef __cplusplus
}
#endif

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
