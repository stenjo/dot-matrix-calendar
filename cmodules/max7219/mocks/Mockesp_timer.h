/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKESP_TIMER_H
#define _MOCKESP_TIMER_H

#include "unity.h"
#include "esp_timer.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

#ifdef __cplusplus
extern "C" {
#endif

void Mockesp_timer_Init(void);
void Mockesp_timer_Destroy(void);
void Mockesp_timer_Verify(void);




#define esp_timer_early_init_ExpectAndReturn(cmock_retval) esp_timer_early_init_CMockExpectAndReturn(__LINE__, cmock_retval)
void esp_timer_early_init_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_timer_init_ExpectAndReturn(cmock_retval) esp_timer_init_CMockExpectAndReturn(__LINE__, cmock_retval)
void esp_timer_init_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_timer_deinit_ExpectAndReturn(cmock_retval) esp_timer_deinit_CMockExpectAndReturn(__LINE__, cmock_retval)
void esp_timer_deinit_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_timer_create_ExpectAndReturn(create_args, out_handle, cmock_retval) esp_timer_create_CMockExpectAndReturn(__LINE__, create_args, out_handle, cmock_retval)
void esp_timer_create_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const esp_timer_create_args_t* create_args, esp_timer_handle_t* out_handle, esp_err_t cmock_to_return);
#define esp_timer_start_once_ExpectAndReturn(timer, timeout_us, cmock_retval) esp_timer_start_once_CMockExpectAndReturn(__LINE__, timer, timeout_us, cmock_retval)
void esp_timer_start_once_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_timer_handle_t timer, uint64_t timeout_us, esp_err_t cmock_to_return);
#define esp_timer_start_periodic_ExpectAndReturn(timer, period, cmock_retval) esp_timer_start_periodic_CMockExpectAndReturn(__LINE__, timer, period, cmock_retval)
void esp_timer_start_periodic_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_timer_handle_t timer, uint64_t period, esp_err_t cmock_to_return);
#define esp_timer_restart_ExpectAndReturn(timer, timeout_us, cmock_retval) esp_timer_restart_CMockExpectAndReturn(__LINE__, timer, timeout_us, cmock_retval)
void esp_timer_restart_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_timer_handle_t timer, uint64_t timeout_us, esp_err_t cmock_to_return);
#define esp_timer_stop_ExpectAndReturn(timer, cmock_retval) esp_timer_stop_CMockExpectAndReturn(__LINE__, timer, cmock_retval)
void esp_timer_stop_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_timer_handle_t timer, esp_err_t cmock_to_return);
#define esp_timer_delete_ExpectAndReturn(timer, cmock_retval) esp_timer_delete_CMockExpectAndReturn(__LINE__, timer, cmock_retval)
void esp_timer_delete_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_timer_handle_t timer, esp_err_t cmock_to_return);
#define esp_timer_get_time_ExpectAndReturn(cmock_retval) esp_timer_get_time_CMockExpectAndReturn(__LINE__, cmock_retval)
void esp_timer_get_time_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int64_t cmock_to_return);
#define esp_timer_get_next_alarm_ExpectAndReturn(cmock_retval) esp_timer_get_next_alarm_CMockExpectAndReturn(__LINE__, cmock_retval)
void esp_timer_get_next_alarm_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int64_t cmock_to_return);
#define esp_timer_get_next_alarm_for_wake_up_ExpectAndReturn(cmock_retval) esp_timer_get_next_alarm_for_wake_up_CMockExpectAndReturn(__LINE__, cmock_retval)
void esp_timer_get_next_alarm_for_wake_up_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int64_t cmock_to_return);
#define esp_timer_get_period_ExpectAndReturn(timer, period, cmock_retval) esp_timer_get_period_CMockExpectAndReturn(__LINE__, timer, period, cmock_retval)
void esp_timer_get_period_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_timer_handle_t timer, uint64_t* period, esp_err_t cmock_to_return);
#define esp_timer_get_expiry_time_ExpectAndReturn(timer, expiry, cmock_retval) esp_timer_get_expiry_time_CMockExpectAndReturn(__LINE__, timer, expiry, cmock_retval)
void esp_timer_get_expiry_time_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_timer_handle_t timer, uint64_t* expiry, esp_err_t cmock_to_return);
#define esp_timer_dump_ExpectAndReturn(stream, cmock_retval) esp_timer_dump_CMockExpectAndReturn(__LINE__, stream, cmock_retval)
void esp_timer_dump_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, FILE* stream, esp_err_t cmock_to_return);
#define esp_timer_isr_dispatch_need_yield_Expect() esp_timer_isr_dispatch_need_yield_CMockExpect(__LINE__)
void esp_timer_isr_dispatch_need_yield_CMockExpect(UNITY_LINE_TYPE cmock_line);
#define esp_timer_is_active_ExpectAndReturn(timer, cmock_retval) esp_timer_is_active_CMockExpectAndReturn(__LINE__, timer, cmock_retval)
void esp_timer_is_active_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_timer_handle_t timer, bool cmock_to_return);

#ifdef __cplusplus
}
#endif

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
